set nocompatible               " Be iMproved
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/ " Required
endif

call neobundle#begin(expand('~/.vim/bundle/')) " Required

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim' " Required

NeoBundle 'neo4j-contrib/cypher-vim-syntax'
NeoBundle 'Shougo/vimproc.vim', {
        \ 'build' : {
        \     'windows' : 'tools\\update-dll-mingw',
        \     'cygwin' : 'make -f make_cygwin.mak',
        \     'mac' : 'make -f make_mac.mak',
        \     'unix' : 'make -f make_unix.mak',
        \    },
        \ }
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler.vim'  " requries unite
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'godlygeek/tabular.git'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-git.git'
NeoBundle 'tpope/vim-fugitive.git'
" NeoBundle 'tomtom/tcomment_vim.git'
" NeoBundle 'The-NERD-Commenter' NeoBundle 'L9'
NeoBundle 'Yggdroot/indentLine.git'
NeoBundle 'terryma/vim-expand-region.git'
"Give the :BD command(s) to keep window layout when deleting buffers
NeoBundle 'bufkill.vim'
NeoBundle 'scrooloose/syntastic.git'
NeoBundle 'majutsushi/tagbar'
" repeat.vim allows other plugins to use the dot repeat command
NeoBundle 'tpope/vim-repeat.git'
NeoBundle 'tpope/vim-surround.git'
NeoBundle 'bling/vim-airline.git'
NeoBundle 'yssl/QFEnter.git'
" vim-fontsize: <Leader><Leader>+ will enter "font size" mode
NeoBundle 'drmikehenry/vim-fontsize'
NeoBundle 'molokai'
NeoBundle 'altercation/vim-colors-solarized.git'
" Defines commands :CP and :CN that change (next, prev) colorschemes
" Also defines :SCROLLCOLORS to provide a list of colorscheme choices
NeoBundle 'ScrollColors'
" Colors color expressions like their actual colors #FF0000
NeoBundle 'chrisbra/color_highlight.git'
NeoBundle 'neo4j-contrib/cypher-vim-syntax'
NeoBundle 'mtth/scratch.vim'
NeoBundle 'Valloric/YouCompleteMe'
" tern complete's javascript
NeoBundle 'marijnh/tern_for_vim'
NeoBundle 'jelera/vim-javascript-syntax'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'mustache/vim-mustache-handlebars'
" ahayman/vim-nodejs-complete
" moll/vim-node
" sidorares/node-vim-debugger

" sherlock performs completion from current buffer for command line line mode
" by using ctrl-tab and ctrl-shift-tab
NeoBundle 'sherlock.vim'
NeoBundle 'JessicaKMcIntosh/TagmaBufMgr.git'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"""""""""""""""""""""""""""""""""""""""""
" Standard VIM options
"""""""""""""""""""""""""""""""""""""""""
" set t_Co=256
set nu               "line numbers
syntax enable
syntax sync minlines=256  " for speed improvement
set synmaxcol=255  " speed for long lines
set cryptmethod=blowfish
set history=500 "lines of history
set showcmd
set hlsearch
set incsearch
set nowrapscan  " don't wrap search from bottom to top (and opposite)
"hi Search ctermbg=darkgreen ctermfg=white guibg=darkgreen guifg=white
"hi Visual ctermbg=darkgrey guibg=darkgrey
"hi MatchParen cterm=bold gui=bold guifg=black guibg=darkgrey
set laststatus=2 "always show the status line
set encoding=utf8
set nosmartindent " smartindent causes line-initial # mark to unintent
set cindent
" set tab stop to 4 spaces so tab spacing isnt so huge
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
"set autoindent
set shiftround " round indents to multiples of shiftwidth
set copyindent " copy structure of existing line indent
"set preserveindent
" no special treatment for '#' character when indenting
set cinkeys-=0#
set indentkeys-=0#
set undodir=~/.vim/undo
set undofile
set undolevels=1500 " max number of changes that can be undone
set undoreload=10000 " max number of lines to save for undo on a buffer reload
set linebreak
set textwidth=79
"set columns=88
set formatoptions-=t " unset automatic text wrapping at textwidth
set formatoptions+=n " recognized numbered lists
" number of lines to cursor
set scrolloff=3
" show matching brackets
set showmatch
set shortmess="atI"
"set cursorline " highlight current line
set ruler       " show line/col position
"set colorcolumn=+1 " colorcolumn textwidth+1
set colorcolumn=81 " colorcolumn textwidth+1
"set foldmethod=syntax
set foldlevelstart=20
set foldnestmax=3  " max nested level to fold
set backspace=indent,eol,start
"set ignorecase
"set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set undolevels=1000  " use many muchos levels of undo
set list
" set listchars=tab:>.,trail:.,extends:#,nbsp:.
set listchars=tab:\|\ ,trail:.,extends:#,nbsp:.
" Add the '-' to the list of characters that are considered part of a keyword.
" IE. Word actions will include hyphenated words.
set iskeyword+=-
"if has('win32') || has('win64')
    "set shellslash
"endif
set autochdir  " Automatically change CWD to file's directory.

" Tab on the command line will show a menu to complete buffer and file names
set wildchar=<Tab> wildmenu wildmode=longest,list,full

set wildignore+=*.o,*.obj,.git,*.pyc,*.py~

"""""""""""""""""""""""""""""""""""""""""
"
autocmd BufRead,BufNewFile *.wsgi set filetype=python
autocmd BufRead,BufNewFile *.tac set filetype=python   " twisted app

" map ctrl-w + [hjkl] to ctrl-[hjkl] to move around windows
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" make j and k act by terminal line when dealing with wrapped text
map j gj
map k gk

nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

nnoremap <leader>lo :silent! botright copen 10<cr>
nnoremap <leader>qo :silent! lopen 10<cr>
nnoremap <leader>lc :silent! cclose<cr>
nnoremap <leader>qc :silent! lclose<cr>

" TagmaBufMgr
" don't map Ctrl+arrows to move around splits/buffers (default 1)
let g:TagmaBufMgrMapCArrow = 0
noremap <leader>tb :MgrToggle<CR>

" YouCompleteMe
let g:ycm_register_as_syntastic_checker = 1 "default 1
let g:Show_diagnostics_ui = 1 "default 1
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1
let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''
let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info
"where to search for .ycm_extra_conf.py if not found:
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 1
"[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_goto_buffer_command = 'same-buffer'
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_key_invoke_completion = '<C-Space>'
nnoremap <F11> :YcmForceCompileAndDiagnostics <CR>

set completeopt=menuone,longest

" vim-commenter
nmap <leader>c gcc
vmap <leader>c gc

inoremap JJ <Esc>
vnoremap JJ <Esc>

" nmap <leader>h :let @/ = ""<CR>
nmap <leader>h :nohl<CR>
nmap <leader>w :w<CR>
nmap <leader>qu :q<CR>
nmap <leader>r :so $MYVIMRC<CR>

" Copy/Paste to system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" 'terryma/vim-expand-region.git'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Horizonal scrolling with Ctrl-N, Ctrl-M
nnoremap <C-m> 2zl
nnoremap <C-n> 2zh

" Window resizing
noremap <leader><Up> 2<C-W>+
noremap <leader><Down> 2<C-W>-
noremap <leader><Left> 2<C-w><
noremap <leader><Right> 2<C-w>>

" Python multi-line string shortcut
inoremap #" """<cr>"""<Up>
inoremap #' '''<cr>'''<Up>

" Airline
let g:airline_theme='powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z=''

" Unite
" let g:unite_source_history_yank_enable = 1
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
" nnoremap <leader>ut :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
" nnoremap <leader>uf :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
" nnoremap <leader>um :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
" nnoremap <leader>uo :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
" nnoremap <leader>uy :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
" nnoremap <leader>ue :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>

" " Custom mappings for the unite buffer
" autocmd FileType unite call s:unite_settings()
" function! s:unite_settings()
"   " Play nice with supertab
"   let b:SuperTabDisabled=1
"   " Enable navigation with control-j and control-k in insert mode
"   " imap <buffer> <C-j>   <Plug>(unite_select_next_line)
"   " imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
" endfunction

" Syntastic
let g:syntastic_disabled_filetypes = ['html']
let g:syntastic_enable_signs = 1
let g:syntastic_enable_balloons=1
let g:syntastic_auto_loc_list=2 " 0, 1 (auto open & close) or 2 (auto close only)
"if set to 2, use the :Errors command to bring up the loc list
let g:syntastic_always_populate_loc_list=1
" if 0, use command :Errors to populate loc list
" if 0, use command :SyntasticSetLoclist to manually set
let g:syntastic_check_on_open=1
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_post_args='--ignore=E126,E127,E128,E201,E202,E203,
                                        \E221,E222,E225,E226,E241,E251,E271,E272'
" let g:syntastic_loc_list_height=5  " default 10
let g:syntastic_java_javac_classpath="/usr/share/java/*"
let g:syntastic_java_javac_classpath.=":/home/offero/Downloads/apps/neo4j-community-2.1.3/lib/*"
" Syntastic uses the quickfix list (location list?)
" ]L ]l [L [l moves to next/previous quickfix items

" VimFiler
let g:vimfiler_force_overwrite_statusline = 0
nmap <leader>vf :VimFiler -buffer-name=explorer
		\ -split -simple -winwidth=35 -toggle -no-quit<CR>


" NerdTree
let g:NERDTreeIgnore=['\.pyc$', '\~$', '.DS_Store$']
"let g:NERDTreeWinPos = "right"
" nnoremap <silent> <F2> :NERDTreeToggle<CR>
" nnoremap <silent> <F3> :NERDTreeFocus<CR>
nnoremap <silent> <leader>nt :NERDTreeFocus<CR>
nnoremap <silent> <leader>nc :NERDTreeClose<CR>
" Stop underlines from showing up on files in NerdTree
autocmd FileType nerdtree hi Title gui=None

" Tagbar      The j argument here _v_ is required to focus the cursor
nmap <silent> <leader>to :TagbarOpen j<CR>
nmap <silent> <leader>tc :TagbarClose<CR>
nmap <silent> <leader>tt :TagbarToggle<CR>

" Delete trailing white space
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.js :call DeleteTrailingWS()

if has('gui_running')
    set guioptions-=T  " no toolbar
    set guioptions-=m  " no menubar
    set lines=999 "maximize height
    set guifont=Monaco\ 9
    colors Tomorrow-Night-Bright
    if winwidth(0)<80
        set columns=110 "good default
    endif
else
    if ((&term)=~"rxvt") || ((&term)=~"screen")
        let g:solarized_contrast="high"
        colors solarized
        set background=dark
        " Override Normal foreground and comment colors to something a bit
        " brighter. Mean for use with solarized
        hi Normal ctermfg=lightgray guifg=lightgray
        hi Comment ctermfg=darkgrey guifg=darkgrey
    endif
endif

highlight ColorColumn ctermbg=darkgrey guibg=gray

" formatting the current paragraph (or selection)
vnoremap <leader>f gq
nnoremap <leader>f gqap

" quick switch buffers with leader key
nnoremap <leader>1 :1b<CR>
nnoremap <leader>2 :2b<CR>
nnoremap <leader>3 :3b<CR>
nnoremap <leader>4 :4b<CR>
nnoremap <leader>5 :5b<CR>
nnoremap <leader>6 :6b<CR>
nnoremap <leader>7 :7b<CR>
nnoremap <leader>8 :8b<CR>
nnoremap <leader>9 :9b<CR>
nnoremap <leader>0 :10b<CR>

let g:quickfix_is_open = 0
function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction
nnoremap <leader>qf :call QuickfixToggle()<cr>

" From: http://vim.wikia.com/wiki/VimTip572
" Highlight all instances of word under cursor, when idle.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

map <leader>H :call AutoHighlightToggle()<CR>
