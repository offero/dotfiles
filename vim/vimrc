set nocompatible               " Be iMproved

if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/ " Required
    " let &rtp = &rtp . ',' . s:editor_root . '/bundle/vundle/'
    " set runtimepath+=s:editor_root.'/bundle/neobundle.vim/' " Required
endif

call neobundle#begin(expand('~/.vim/bundle/')) " Required

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim' " Required

NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

NeoBundle 'scrooloose/nerdtree'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-git.git'  " vim git runtime files
NeoBundle 'tpope/vim-fugitive.git'
NeoBundle 'Yggdroot/indentLine.git'
NeoBundle 'terryma/vim-expand-region.git'
NeoBundle 'bufkill.vim' "bufkill: :BD command(s) to keep window layout when deleting buffers
NeoBundle 'scrooloose/syntastic.git'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tpope/vim-repeat.git' " exposes the repeat '.' command to plugins
NeoBundle 'tpope/vim-surround.git'
NeoBundle 'yssl/QFEnter.git'  " open quickfix item in last focused window
NeoBundle 'sherlock.vim' " command line mode completion C-Tab C-S-Tab
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'mhinz/vim-tmuxify'  " send commands to a tmux pane
                               " To try: ervandew/screen
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'FelikZ/ctrlp-py-matcher.git'  " Faster ctrl-p matcher
NeoBundle 'rking/ag.vim'
NeoBundle 'airblade/vim-rooter.git'  " autochdir to project roots
NeoBundle 'wellle/targets.vim'
NeoBundle 'terryma/vim-multiple-cursors'

" Colors
NeoBundle 'chrisbra/color_highlight.git' " Show #RRGGBB colors
NeoBundle 'guns/xterm-color-table.vim'

" Language Support
NeoBundle 'davidhalter/jedi-vim'
NeoBundle 'ternjs/tern_for_vim'
NeoBundle 'fatih/vim-go'
NeoBundle 'JuliaLang/julia-vim'
NeoBundle 'mustache/vim-mustache-handlebars'
NeoBundle 'othree/html5.vim'
NeoBundle 'neo4j-contrib/cypher-vim-syntax'
NeoBundle 'chase/vim-ansible-yaml'
NeoBundle 'hdima/python-syntax'
NeoBundle 'rust-lang/rust.vim'
NeoBundle 'jmcantrell/vim-virtualenv'
NeoBundle 'elzr/vim-json'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"""""""""""""""""""""""""""""""""""""""""
" Standard VIM options
"""""""""""""""""""""""""""""""""""""""""
set nu               "line numbers
set relativenumber
syntax enable
syntax sync minlines=256  " for speed improvement
set synmaxcol=160  " speed for long lines
set cryptmethod=blowfish2 " vim's default is BAD
set history=500
set showcmd
set hlsearch
set incsearch
set nowrap      " don't wrap text
set nowrapscan  " don't wrap search from bottom to top (and opposite)
set laststatus=2 " always show the status line
set encoding=utf8
set nosmartindent " smartindent causes line-initial # mark to unindent
set cindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set shiftround
set copyindent
" no special treatment for '#' character when indenting
set cinkeys-=0#
set indentkeys-=0#
set undodir=~/.vim/undo
set undofile
set undolevels=1500 " max number of changes that can be undone
set undoreload=10000 " max number of lines to save for undo on a buffer reload
set linebreak
set textwidth=100
set formatoptions-=t " unset automatic text wrapping at textwidth
set formatoptions+=n " recognized numbered lists
set scrolloff=3 " number of lines to cursor
set noshowmatch " brackets
set shortmess="atI"
set nocursorline
set nocursorcolumn
set noruler
set foldlevelstart=20
set foldnestmax=3
set backspace=indent,eol,start
set undolevels=1000
set list
set listchars=tab:\|\ ,trail:.,extends:#,nbsp:.
" Add the '-' to the list of characters that are considered part of a keyword.
" IE. Word actions will include hyphenated words.
set iskeyword+=-
if has('win32') || has('win64')
    set shellslash
endif

set noautochdir
" set switchbuf=useopen

set undodir=~/.vim/tmp/undo/ " undo files
set backupdir=~/.vim/tmp/backup/ " backups
set directory=~/.vim/tmp/swap/ " swap files

if !isdirectory(expand(&undodir))
call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
call mkdir(expand(&directory), "p")
endif

" Tab on the command line will show a menu to complete buffer and file names
set wildchar=<Tab> wildmenu wildmode=longest,list,full
set wildignore+=*.o,*.obj,.git,*.pyc,*.py~

set diffopt+=vertical

" enable mouse interaction when running in tmux or screen
set mouse+=a
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

" vim-session
let g:session_autoload='no'
let g:session_autosave='yes'
let g:session_autosave_periodic=5

" vim-tmuxify
let g:tmuxify_custom_command = 'tmux split-window -d -l 10'

" a Silent command that calls redraw automatically
command! -nargs=1 Silent
\ | execute ':silent !'.<q-args>
\ | execute ':redraw!'

"""""""""""""""""""""""""""""""""""""""""
" The Silver Searcher
" let g:ag_prg="ag --vimgrep"
if executable('ag')
  " Use ag over grep
  let g:ag_highlight=1
  " set grepprg=ag\ --nogroup\ --nocolor\ --column
  " set grepformat=%f:%l:%c:%m,%f:%l:%m
  set grepprg=ag\ --skip-vcs-ignores\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --skip-vcs-ignores --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  " let g:ctrlp_cmd = 'CtrlP'
endif

let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }
let g:ctrlp_working_path_mode = 'rw'
" let g:ctrlp_max_files = 0

" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|tmp$\|node_modules$\|bower_components$\|build$\|dist$',
  \ 'file': '.\(DS_Store\|so\|dat\|pdf\|epub\|rar\|png\|jpg\|dmg\|bz\|gz\|tar\|xib\|pyc\)$'
  \ }

let g:rooter_use_lcd = 1
let g:rooter_change_directory_for_non_project_files = 1
let g:rooter_patterns = ['.git', '.git/', '_darcs/', '.hg/', '.bzr/', '.svn/',
                        \ '.project', '.project/', 'setup.py', 'package.json']
let g:rooter_manual_only = 1

" manually set so that node and tern are found by gui macvim
let g:tern#command = ['/Users/offero/.nvm/current/bin/node', '/Users/offero/.vim/bundle/tern_for_vim/node_modules/tern/bin/tern', '--no-port-file']

" cd to this file's directory
nmap <leader>cd :cd %:p:h<CR>
" cd to rooter's root
nmap <leader>cr :Rooter<CR>
nmap <leader>cc :setlocal cc=0<cr>

nmap <leader>pb :CtrlPBuffer<CR>
nmap <leader>pp :CtrlP<CR>
nmap <leader>pa :CtrlPMixed<CR>
nmap <leader>pr :CtrlPRoot<CR>
nmap <leader>pm :CtrlPMRUFiles<CR>

nmap <leader>tc :tabclose<CR>
nmap <leader>tn :tabnext<CR>
nmap <leader>tp :tabprev<CR>

nnoremap <leader>ls :ls<CR>
nnoremap <leader>js <Esc>:%!json<CR><Esc>:set filetype=json<CR>
nnoremap <leader>f0 :set foldlevel=0<CR>
nnoremap <leader>f1 :set foldlevel=1<CR>
nnoremap <leader>f2 :set foldlevel=2<CR>
nnoremap <leader>f3 :set foldlevel=3<CR>
nnoremap <leader>f4 :set foldlevel=4<CR>
nnoremap <leader>f5 :set foldlevel=5<CR>
nnoremap <leader>f6 :set foldlevel=6<CR>
nnoremap <leader>f7 :set foldlevel=7<CR>
nnoremap <leader>f8 :set foldlevel=8<CR>
nnoremap <leader>f9 :set foldlevel=9<CR>

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTag
set omnifunc=syntaxcomplete#Complete

" bind K to grep word under cursor
" nnoremap K :silent! grep! "\b<C-r><C-w>\b"<CR>:cwindow<CR>:redraw!<CR>
" nnoremap <silent> K :Ag! <cword><CR>

function! AgDir(search, dir)
    exec 'Ag! '. a:search . " " . a:dir
endfunction

function! GetVisual()
    let reg_save = getreg('"')
    let regtype_save = getregtype('"') let cb_save = &clipboard
    set clipboard&
    normal! ""gvy
    let selection = getreg('"')
    call setreg('"', reg_save, regtype_save)
    let &clipboard = cb_save
    return selection
endfunction

"grep visual selection
" vnoremap K :<C-U>execute "Ag " . GetVisual()<CR>

"Grep for usages of the current file
nnoremap <leader>gcf :exec "Ag " . expand("%:t:r")<CR>

" bind \ (backward slash) to grep shortcut
" command! -nargs=+ -complete=file_in_path -bar Ag silent grep! <args>|cwindow|redraw!

" tern
let g:tern_map_keys=1
let g:tern_show_argument_hints='on_hold'

augroup handlebars
    autocmd!
    au BufNewFile,BufRead *.hb set filetype=html.handlebars syntax=mustache
augroup END

augroup custom_filetype_python
    autocmd!
    autocmd BufRead,BufNewFile *.wsgi set filetype=python
    autocmd BufRead,BufNewFile *.tac set filetype=python   " twisted app
    " Python multi-line string shortcut
    autocmd FileType python inoremap <buffer> #" """<cr>"""<Up>
    autocmd FileType python inoremap <buffer> #' '''<cr>'''<Up>
    autocmd FileType python inoremap <buffer> #p import pdb; pdb.set_trace()
    autocmd FileType python inoremap <buffer> #i import ipdb; ipdb.set_trace()
    autocmd FileType python inoremap <buffer> #u import pudb; pu.db
    autocmd FileType python inoremap <buffer> #n from nose.tools import set_trace; set_trace()
    autocmd FileType python inoremap <buffer> #f from __future__ import (absolute_import, division, print_function, unicode_literals)
    " autocmd FileType python set colorcolumn=120
augroup END

let g:vim_json_syntax_conceal=0
let g:indentLine_noConcealCursor = 1

" map ctrl-w + [hjkl] to ctrl-[hjkl] to move around windows
" noremap <C-h> <C-w>h
" noremap <C-j> <C-w>j
" noremap <C-k> <C-w>k
" noremap <C-l> <C-w>l

" make j and k act by terminal line when dealing with wrapped text
" map j gj
" map k gk

nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"
let maplocalleader = "\<Space>"
let g:maplocalleader = "\<Space>"

nnoremap <leader>qo :silent! botright copen 10<cr>
nnoremap <leader>lo :silent! lopen 10<cr>
nnoremap <leader>qc :silent! cclose<cr>
nnoremap <leader>lc :silent! lclose<cr>

" Navigate the quickfix entries
nnoremap <leader>cn :cnext<CR>
nnoremap <leader>cp :cprev<CR>
" Navigate the location entries
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>

" TagmaBufMgr
" don't map Ctrl+arrows to move around splits/buffers (default 1)
let g:TagmaBufMgrMapCArrow = 0
let g:TagmaBufMgrBufName="#####TB#####"
"""
noremap <leader>tb :MgrToggle<CR>

nnoremap <leader>s <kDivide>

" vim-commentary remap
nmap <leader>cm gcc
vmap <leader>cm gc

inoremap JJ <Esc>
vnoremap JJ <Esc>
snoremap JJ <Esc>
cnoremap JJ <Esc>

" Highlight current word without jumping
nmap <leader>hs :let @/ = expand("<cword>")<CR>:set hlsearch<CR>
" TODO: Above with visual selection
" Toggle highlight:
nmap <leader>hl :set hlsearch!<CR>
" Clear highlight
nmap <leader>hc :let @/ = ""<CR>
nmap <leader>w :w<CR>
nmap <leader>qu :q<CR>
nmap <leader>qa :qa<CR>
nmap <leader>r :so $MYVIMRC<CR>

" Copy/Paste to system clipboard
vmap <leader>y "+y
vmap <leader>d "+d
nmap <leader>p "+p
nmap <leader>P "+P
vmap <leader>p "+p
vmap <leader>P "+P

" 'terryma/vim-expand-region.git'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Horizonal scrolling
nnoremap <Right> 2zl
nnoremap <Left> 2zh
nnoremap <Down> 2<C-e>
nnoremap <Up> 2<C-y>

" Window resizing
noremap <leader><Up> 2<C-W>+
noremap <leader><Down> 2<C-W>-
noremap <leader><Left> 2<C-w><
noremap <leader><Right> 2<C-w>>

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='behelit'
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_left_sep=' '
let g:airline_right_sep=' '
let g:airline_section_a = '%{airline#util#wrap(airline#parts#mode(),0)}'
let g:airline_section_a = g:airline_section_a . '%#__restore__#%{airline#util#append(airline#parts#paste(),0)}'
let g:airline_section_a = g:airline_section_a . '%{airline#util#append("",0)}'
let g:airline_section_a = g:airline_section_a . '%{airline#util#append(airline#parts#iminsert(),0)}'
let g:airline_section_b = '%{airline#util#wrap(airline#extensions#branch#get_head(),0)}'
" c modified to show full path, max 60 chars
let g:airline_section_c='%<%.60F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
" let g:airline_section_x='S:%{xolox#session#find_current_session()}'
" line, character
let g:airline_section_y='(%l,%v)'
" buffer number
let g:airline_section_z='#%n'

" Completion
" set complete=".,w,b,u,t,i"
" set completeopt=menuone,longest
inoremap <silent> <buffer> <C-S-N> <c-x><c-o>
inoremap <silent> <buffer> <C-S-P> <c-x><c-p>

" Jedi
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = "2"
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_select_first = 0
au FileType python setlocal completeopt-=preview " The reason to deactivate jedi#auto_vim_configuration
" Disable the docstring window:
" autocmd FileType python setlocal completeopt-=preview
command! JediDoc call jedi#show_documentation()
command! JediAsgn call jedi#goto_assignments()
command! JediDef call jedi#goto_definitions()
command! JediUsage call jedi#usages()

" Syntastic
let g:syntastic_disabled_filetypes = ['html']
let g:syntastic_enable_signs = 1
let g:syntastic_enable_balloons=1
let g:syntastic_enable_highlighting=0
let g:syntastic_auto_loc_list=0 " 0, 1 (auto open & close) or 2 (auto close only)
"if set to 2, use the :Errors command to bring up the loc list
let g:syntastic_always_populate_loc_list=1
" if 0, use command :Errors to populate loc list
" if 0, use command :SyntasticSetLoclist to manually set
let g:syntastic_check_on_open=1
" let g:syntastic_check_on_wq=0
" let g:syntastic_python_checkers=['flake8']
let g:syntastic_mode_map = {
  \ 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html', 'xhtml', 'htmldjango', 'css']
  \ }
let g:syntastic_python_flake8_post_args='--ignore=E126,E127,E128,E201,E202,E203,
                                    \E221,E222,E225,E226,E241,E251,E271,E272,E302,
                                    \E501'
let g:syntastic_python_pep8_post_args='--ignore=E126,E127,E128,E201,E202,E203,
                                    \E221,E222,E225,E226,E241,E251,E271,E272,E302,
                                    \E501'
" let g:syntastic_loc_list_height=5  " default 10
" let g:syntastic_java_javac_classpath="/usr/share/java/*"
" let g:syntastic_java_javac_classpath.=":~/Downloads/apps/neo4j-community-2.1.3/lib/*"
" let g:syntastic_debug=1
" Other checkers: 'flake8', 'pyflakes', 'pylint'
let g:syntastic_python_checkers=['py3kwarn', 'flake8']
let g:syntastic_python_python_exec = 'python'
let g:syntastic_python_pylint_exe = 'python -m pylint'
let g:syntastic_javascript_checkers = ['jshint']

" NerdTree
let g:NERDTreeMinimalUI=1
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.o$', '\.pyc$', '\~$', '.DS_Store$']
let g:NERDTreeAutoCenter=1

nnoremap <silent> <leader>nt :NERDTreeFocus<CR>
nnoremap <silent> <leader>nc :NERDTreeClose<CR>
nnoremap <silent> <leader>nf :NERDTreeFind<CR>
" Stop underlines from showing up on files in NerdTree
augroup au_nerdtree
    autocmd!
    autocmd FileType nerdtree hi Title gui=None
augroup END

" Tagbar        The j argument here _v_ is required to focus the cursor
nmap <silent> <leader>to :TagbarOpen j<CR>
nmap <silent> <leader>tc :TagbarClose<CR>
nmap <silent> <leader>tt :TagbarToggle<CR>

" Delete trailing white space
" func! DeleteTrailingWS()
"   exe "normal mz"
"   %s/\s\+$//ge
"   exe "normal `z"
" endfunc

" augroup trailws
"     autocmd!
"     autocmd BufWrite *.py :call DeleteTrailingWS()
"     autocmd BufWrite *.js :call DeleteTrailingWS()
" augroup END

func! DoSolarized()
    set background=dark
    " let g:solarized_visibility="high"
    " let g:solarized_contrast="high"
    let g:solarized_termtrans = 1
    let g:solarized_termcolors=256
    colors solarized
    " Override Normal foreground and comment colors to something a bit brighter
    hi Normal ctermfg=lightgray guifg=lightgray
    hi Comment ctermfg=darkgrey guifg=darkgrey
    hi ColorColumn ctermbg=24 guibg=#005f87
    " get rid of the red highlight:
    hi SpecialKey ctermfg=0
endfunc

" Color schemes I like:
"  Dark: Tomorrow-Night-Bright, materialtheme, wombat, hybrid, material,
"        one-dark, monokai
"  Light: summerfruit256, scheakur
" Fonts I like:
"   Sauce\ Code\ Powerline\ Light:h12 / Semibold
"   Monaco\ 9
"   Courier\ New:h12
"   Anonymous\ Pro:h12

if has('gui_running')
    set guioptions-=T  " no toolbar
    set guioptions-=m  " no menubar
    set guioptions+=c  " console dialogs
    set lines=999 "maximize height
    if has('mac') " macvim only along with 'gui_mac' and 'macunix'
        " set guifont=Anonymice\ Powerline:h14
        set guifont=Inconsolata\ for\ Powerline:h16
    else
        set guifont=Monaco\ 9
    endif
    if winwidth(0)<80
        set columns=110 "good default
    endif
    " disable cursor blinking
    set guicursor+=a:blinkon0
" else
    " hi CursorLine cterm=bold
    " hi Pmenu ctermbg=173
    " hi PmenuSel ctermbg=179
    " hi Comment ctermfg=249
    " hi ColorColumn  ctermfg=NONE ctermbg=25  cterm=NONE
    " hi LineNr ctermfg=249
    " hi CursorLineNr ctermfg=234
    " if ((&term)=~"rxvt") || ((&term)=~"screen")
    " :call DoSolarized()
    " endif
endif

" set background=dark
" colors monokai

" formatting the current paragraph (or selection)
vnoremap <leader>f gq
nnoremap <leader>f gqap

let g:quickfix_is_open = 0
function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction
nnoremap <leader>qf :call QuickfixToggle()<cr>

" From: http://vim.wikia.com/wiki/VimTip572
" Highlight all instances of word under cursor, when idle.
" Type z/ to toggle highlighting on/off.
" nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

map <leader>H :call AutoHighlightToggle()<CR>

command! -nargs=* -bang -bar
      \ -complete=customlist,neobundle#commands#complete_deleted_bundles
      \ NeoBundleClean
      \ call neobundle#commands#clean('!' == '<bang>', <f-args>)
