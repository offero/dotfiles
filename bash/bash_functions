#!/usr/bin/env bash

# custom bash functions

function gbl() {
    git for-each-ref --sort=-committerdate --format='%(committerdate) %(authorname) %(refname)' refs/remotes/origin/|grep -e ".$@"|head -n 10;
}

updir(){
    if [ $# -gt 0 ];then
        path=""
        for (( i=1; i<=$1; i++ )); do
            path=$path"../"
        done
        cd $path
    else
        cd ../
    fi
}

tailjsonpp(){
    tail $* | while read -r line; do echo $line | json_pp; done
}

tailjson(){
    tail $* | while read -r line; do echo $line | json; done
}

# quick cd to wanderu dev folders
cw(){
    cd $WANDERU_HOME/$*
}

calc(){ python -c "from __future__ import division; from math import *; print($*);" ; }
#calc2(){ python -c 'from __future__ import division; from math import *; import sys; print("".join(sys.argv[1:]));' ; }
abspath() { python -c "from os.path import abspath; print(abspath('$*'))"; }

function lf
{
    ls --color=tty --classify $*
    echo "$(ls -l $* | wc -l) files"
}

##################
#extract files eg: ex tarball.tar#
##################
unpack() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1        ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       rar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xf $1        ;;
            *.tbz2)      tar xjf $1      ;;
            *.tgz)       tar xzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    function setgov()
    {
        for i in 0 1 2 3
        do
            #cpufreq-selector -c $i -g "$1"
            cpufreq-set -c $i -g "$1"
        done
    }
fi

colors() {
    local fgc bgc vals seq0

    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
        # background colors
        for bgc in {40..47}; do
            fgc=${fgc#37} # white
            bgc=${bgc#40} # black

            vals="${fgc:+$fgc;}${bgc}"
            vals=${vals%%;}

            seq0="${vals:+\e[${vals}m}"
            printf "  %-9s" "${seq0:-(default)}"
            printf " ${seq0}TEXT\e[m"
            printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
        done
        echo; echo
    done
}

dict () {
     curl dict://dict.org/d:"${1}"
}
